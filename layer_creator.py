# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayersFromField
                                 A QGIS plugin
 Field-Based Layer Creator: A versatile QGIS plugin that generates new layers based on field categories from any vector layer, regardless of its geometry or use.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Sebastian Mejia Rios
        email                : sebastianmr6@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import re
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, QgsVectorLayer, QgsMapLayerProxyModel, QgsVectorFileWriter
from qgis.gui import QgsMapLayerComboBox, QgsFieldComboBox, QgsFileWidget
from .resources import *
from .layer_creator_dialog import LayersFromFieldDialog
import os.path

class LayersFromField:
    """Implementación del Plugin de QGIS."""

    def __init__(self, iface):
        """Constructor.

        :param iface: Una instancia de interfaz que se pasará a esta clase
            que proporciona el gancho por el cual puedes manipular la aplicación QGIS en tiempo de ejecución.
        :type iface: QgsInterface
        """
        # Guardar referencia a la interfaz de QGIS
        self.iface = iface
        # Inicializar el directorio del plugin
        self.plugin_dir = os.path.dirname(__file__)
        # Crear el diálogo
        self.dlg = LayersFromFieldDialog()

        # Inicializar el idioma
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LayersFromField_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declarar atributos de instancia
        self.actions = []
        self.menu = self.tr(u'&Field-Based Layer Creator')

        # Verificar si el plugin se inició por primera vez en la sesión actual de QGIS
        # Debe configurarse en initGui() para sobrevivir a las recargas del plugin
        self.first_start = None


        # Configurar QgsFileWidget
        self.dlg.mQgsFileExportWidget.setStorageMode(QgsFileWidget.SaveFile)
        self.dlg.mQgsFileExportWidget.setFilter("GeoPackage (*.gpkg);;Shapefile (*.shp)")

        self.dlg.checkBoxAddResults.setChecked(True)
        #self.dlg.mQgsFileExportWidget.setUseTemporaryFile(True)

    def tr(self, message):
        """Obtener la traducción de una cadena usando la API de traducción de Qt.

        Implementamos esto nosotros mismos ya que no heredamos QObject.

        :param message: Cadena para traducir.
        :type message: str, QString

        :returns: Versión traducida del mensaje.
        :rtype: QString
        """
        return QCoreApplication.translate('LayersFromField', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Agregar un ícono a la barra de herramientas.

        :param icon_path: Ruta al ícono para esta acción. Puede ser una ruta de recursos
            (por ejemplo, ':/plugins/foo/bar.png') o una ruta normal del sistema de archivos.
        :type icon_path: str

        :param text: Texto que debe mostrarse en los elementos del menú para esta acción.
        :type text: str

        :param callback: Función a llamar cuando se active la acción.
        :type callback: function

        :param enabled_flag: Un indicador que indica si la acción debe estar habilitada
            por defecto. Por defecto es True.
        :type enabled_flag: bool

        :param add_to_menu: Indicador que indica si la acción también
            debe agregarse al menú. Por defecto es True.
        :type add_to_menu: bool

        :param add_to_toolbar: Indicador que indica si la acción también
            debe agregarse a la barra de herramientas. Por defecto es True.
        :type add_to_toolbar: bool

        :param status_tip: Texto opcional para mostrar en una ventana emergente cuando el
            puntero del mouse se desplaza sobre la acción.
        :type status_tip: str

        :param parent: Widget principal para la nueva acción. Por defecto es None.
        :type parent: QWidget

        :param whats_this: Texto opcional para mostrar en la barra de estado cuando el
            puntero del mouse se desplaza sobre la acción.

        :returns: La acción que se creó. Ten en cuenta que la acción también
            se agrega a la lista self.actions.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Crear las entradas del menú y los íconos de la barra de herramientas dentro de la GUI de QGIS."""

        icon_path = ':/plugins/layer_creator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create layers from field'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.dlg.run_button.clicked.connect(self.__procesar)

        # Se establecerá en False en run()
        self.first_start = True

    def __procesar(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        if not layer:
            QMessageBox.warning(self.dlg, "No Layer Selected", "Please select a layer to export.")
            return

        field_name = self.dlg.mFieldComboBox.currentField()
        if isinstance(layer, QgsVectorLayer) and field_name:
            unique_values = layer.uniqueValues(layer.fields().indexOf(field_name))

        file_path = self.dlg.mQgsFileExportWidget.filePath()
        if file_path:
            if file_path.endswith('.gpkg'):
                for field_value in unique_values:
                    query = f'"{field_name}" = \'{field_value}\''
                    layer.selectByExpression(query)
                    # delete special characters using regex
                    sanitized_value = re.sub(r'[^A-Za-z0-9]+', '_', field_value).strip()
                    
                    options = QgsVectorFileWriter.SaveVectorOptions()
                    options.driverName = "GPKG"
                    options.layerName = sanitized_value
                    options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
                    options.onlySelected = True
                    
                    error = QgsVectorFileWriter.writeAsVectorFormatV2(layer, file_path, QgsProject.instance().transformContext(), options)
                    if error[0] != QgsVectorFileWriter.NoError:
                        QMessageBox.warning(self.dlg, "Error", f"Error al exportar la capa: {error}")
                layer.removeSelection()
            elif file_path.endswith('.shp'):
                for field_value in unique_values:
                    query = f'"{field_name}" = \'{field_value}\''
                    layer.selectByExpression(query)
                    # delete special characters using regex
                    sanitized_value = re.sub(r'[^A-Za-z0-9 ]+', '', field_value).strip().replace(" ", "_")
                    file_name = file_path[:-4] + f'_{sanitized_value}.shp'
                    QgsVectorFileWriter.writeAsVectorFormat(layer, file_name, "utf-8", driverName="ESRI Shapefile", onlySelected=True)
                    new_layer = QgsVectorLayer(file_name, f"{sanitized_value}", "ogr")
                    if self.dlg.checkBoxAddResults.isChecked():
                        QgsProject.instance().addMapLayer(new_layer)
                    layer.removeSelection()
            else:
                QMessageBox.warning(self.dlg, "Unsupported Format", "Please select a valid file format.")
        else:
            QMessageBox.warning(self.dlg, "No File Path", "Please select a file path.")


    def __populate_vector_layers_combobox(self):
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.dlg.mMapLayerComboBox.setShowCrs(True)
        self.dlg.mMapLayerComboBox.layerChanged.connect(self.update_field_combo_box)

    def update_field_combo_box(self, layer):
        if isinstance(layer, QgsVectorLayer):
            self.dlg.mFieldComboBox.setLayer(layer)

    def unload(self):
        """Eliminar el ítem del menú del plugin y el ícono de la barra de herramientas de la GUI de QGIS."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Field-Based Layer Creator'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Método de ejecución que realiza todo el trabajo real"""

        # Crear el diálogo con elementos (después de la traducción) y mantener la referencia
        # Solo crear GUI UNA VEZ en el callback, para que solo se cargue cuando se inicie el plugin
        if self.first_start:
            self.first_start = False
            # Fill the combobox with vector layers
            self.__populate_vector_layers_combobox()

        # Show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass